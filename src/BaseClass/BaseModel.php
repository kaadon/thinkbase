<?php

namespace Kaadon\ThinkBase\BaseClass;

use Exception;
use think\facade\Log;
use think\Model;
/*
 * @Description: 模型基类
 * @Author: zs
 * @Date: 2021-05-25 16:12:33
 * @LastEditors: zs
 * @LastEditTime: 2021-05-25 16:14:10
 */
class BaseModel extends Model
{
    /**
     * 自动时间戳类型
     *
     */
    protected $autoWriteTimestamp = 'int';
    /**
     * 添加时间
     *
     */
    protected $createTime = 'create_time';

    /**
     * 更新时间
     *
     */
    protected $updateTime = 'update_time';

    /**
     * 清除缓存
     * @param Model $model
     * @return void
     */
    private static function clearCache(Model $model): void{}


    /**
     * 更新后事件
     * @param Model $model
     * @return void
     * @throws Exception
     */
    public static function onAfterUpdate(Model $model): void
    {
        try {
            //逻辑代码
            self::clearCache($model);
        } catch (Exception $exception) {
            throw new Exception($exception->getMessage());
        }
    }

    /**
     * 增加后事件
     * @param Model $model
     * @return void
     * @throws Exception
     */
    public static function onAfterInsert(Model $model): void
    {
        try {
            //逻辑代码
            self::clearCache($model);
        } catch (Exception $exception) {
            throw new Exception($exception->getMessage());
        }
    }

    /**
     * 删除后事件
     * @param Model $model
     * @return void
     * @throws Exception
     */
    public static function onAfterDelete(Model $model): void
    {
        try {
            //逻辑代码
            self::clearCache($model);
        } catch (Exception $exception) {
            throw new Exception($exception->getMessage());
        }
    }

    /**
     * @param array $data
     * @return int|string
     */
    public function insertGetId(array $data): int|string
    {
        $selfClass                    = (new self());
        $data[$selfClass->createTime] = $data[$selfClass->updateTime] = time();
        return parent::insertGetId($data); // TODO: Change the autogenerated stub
    }



    /**
     * @param array $data
     * @param bool $getLastInsID
     * @return int|string
     */
    public function insert(array $data = [], bool $getLastInsID = false): int|string
    {
        $selfClass                    = (new self());
        $data[$selfClass->createTime] = $data[$selfClass->updateTime] = time();
        return parent::insert($data, $getLastInsID);
    }


    /**
     * @param array $data
     * @param array $allowField
     * @param bool $replace
     * @param string $suffix
     * @return Model
     */
    public static function create(array $data, array $allowField = [], bool $replace = false, string $suffix = ''): Model
    {
        $selfClass                    = (new self());
        $data[$selfClass->createTime] = $data[$selfClass->updateTime] = time();
        $model = parent::create($data, $allowField, $replace, $suffix);
        self::clearCache($model);
        return $model;
    }

    /**
     * @param array $dataSet
     * @param int $limit
     * @return int
     */
    public function insertAll(array $dataSet = [], int $limit = 0): int
    {
        foreach ($dataSet as $key => $item) {
            $dataSet[$key][$this->createTime] = $dataSet[$key][$this->updateTime] = time();
        }
        return parent::insertAll($dataSet, $limit);
    }
}